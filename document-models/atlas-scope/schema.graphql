scalar Amount_Tokens
scalar EthereumAddress
scalar Amount_Percentage
scalar EmailAddress
scalar Date
scalar DateTime
scalar URL
scalar Amount_Money
scalar OLabel
scalar Currency
scalar PHID
scalar OID
scalar Amount_Fiat
scalar Amount_Currency
scalar Amount_Crypto
scalar Amount
type AtlasScopeState {
  """
  Unique document number assigned to the Scope document within Atlas.
  """
  docNo: String
  """
  Full name of the Scope without the document number. 
  For example: "The Support Scope" 
  """
  name: OLabel
  """
  Document number of the scope document within Atlas. 
  For example: "A.1" for the Governance Scope. 
  """
  content: String
  """
  Master status as managed by the Atlas Axis facilitator group.
  """
  masterStatus: Status!
  """
  Document tags as managed by the Atlas Axis facilitator group.
  """
  globalTags: [GlobalTag!]!
  """
  List of Atlas documents that were relevant for the creation of the scope document. 
  """
  originalContextData: [DocumentInfo!]!
  """
  Original Notion document ID of the scope document.
  """
  notionId: String
}

"""
Reference to a document within Atlas with optional name and document number for display reasons. 
"""
type DocumentInfo {
  id: PHID!
  title: OLabel
  docNo: String
  documentType: String
}

enum Status {
  PLACEHOLDER
  PROVISIONAL
  APPROVED
  DEFERRED
  ARCHIVED
}

enum GlobalTag {
  RECURSIVE_IMPROVEMENT
  SCOPE_ADVISOR
  DAO_TOOLKIT
  PURPOSE_SYSTEM
  ML_LOW_PRIORITY
  EXTERNAL_REFERENCE
  ML_DEFER
  SUBDAO_INCUBATION
  V1_MIP
  ML_HIGH_PRIORITY
  ECOSYSTEM_INTELLIGENCE
  LEGACY_TERM_USE_APPROVED
  CAIS
  INTERNAL_REFERENCE
  FACILITATORDAO
  ML_MED_PRIORITY
  AVC
  P0_HUB_ENTRY_NEEDED
  ANON_WORKFORCE
  NEWCHAIN
  ML_SUPPORT_DOCS_NEEDED
  SUBDAO_REWARDS
  TWO_STAGE_BRIDGE
}



# general

input SetScopeNameInput {
  name: OLabel!
}

input SetContentInput {
  "Update the content of the scope document"
  content: String!
}

input SetMasterStatusInput {
  "New master status"
  masterStatus: Status!
}

input SetDocNumberInput {
  docNo: String
}

# tags

input AddTagsInput {
  "Tags to be added"
  newTags: [GlobalTag!]!
}

input RemoveTagsInput {
  "Tags to be removed"
  tags: [GlobalTag!]!
}

# context

input AddContextDataInput {
  id: PHID!
  title: String
  docNo: String
  documentType: String
}

input RemoveContextDataInput {
  id: PHID!
}

input SetNotionIdInput {
  "Add your inputs here"
  notionID: String
}

input ReplaceContextDataInput {
  prevId: PHID!
  id:PHID!
  title: String
  docNo: String
  documentType: String
}